package main

import (
	"go/parser"
	"go/token"
	"testing"

	"github.com/andreyvit/diff"
)

func TestAllArgsConstructor(t *testing.T) {
	var tests = []struct {
		name string
		in   string
		out  string
	}{
		{
			"AllArgsConstructor 1 required",
			`
package p

//gog:allArgsConstructor
type Dummy struct {
	//gog:@required
	name  string
	value int64
}
`,
			`// Code generated by gog; DO NOT EDIT.
package p

// Generated by gog:allArgsConstructor

func NewDummy(name string) Dummy {
	return Dummy{
		name: name,
	}
}
`,
		},
		{
			"AllArgsConstructor many required",
			`
package p

//gog:allArgsConstructor
type Dummy struct {
	//gog:@required
	name  string
	//gog:@required
	value int64
}
`,
			`// Code generated by gog; DO NOT EDIT.
package p

// Generated by gog:allArgsConstructor

func NewDummy(name string, value int64) Dummy {
	return Dummy{
		name:  name,
		value: value,
	}
}
`,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			run(t, tt.in, tt.out)
		})
	}
}

func TestBuilder(t *testing.T) {
	var tests = []struct {
		name string
		in   string
		out  string
	}{
		{
			"Builder",
			`
package p

//gog:builder
type Dummy struct {
	Other
	//gog:@required
	name  string
	value int64
}
`,
			`// Code generated by gog; DO NOT EDIT.
package p

import "errors"

// Generated by gog:builder

type DummyBuilder struct {
	Other
	name        string
	nameDefined bool
	value       int64
}

func NewDummyBuilder() *DummyBuilder { return &DummyBuilder{} }

func (b *DummyBuilder) WithOther(other Other) *DummyBuilder {
	b.Other = other
	return b
}

func (b *DummyBuilder) Name(name string) *DummyBuilder {
	b.nameDefined = true
	b.name = name
	return b
}

func (b *DummyBuilder) Value(value int64) *DummyBuilder {
	b.value = value
	return b
}

func (b *DummyBuilder) Build() (*Dummy, error) {
	if !b.nameDefined {
		return nil, errors.New("Field name is required.")
	}

	s := &Dummy{}
	s.Other = b.Other
	s.name = b.name
	s.value = b.value

	return s, nil
}

func (src Dummy) ToBuild() *DummyBuilder {
	return &DummyBuilder{
		Other: src.Other,
		name:  src.name,
		value: src.value,
	}
}
`,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			run(t, tt.in, tt.out)
		})
	}
}

func run(t *testing.T, in string, out string) {
	fset := token.NewFileSet() // positions are relative to fset
	f, err := parser.ParseFile(fset, "src.go", in, parser.ParseComments)
	if err != nil {
		panic(err)
	}
	code := inspectGoFile(f).generateCode()
	src := string(code)
	if src != out {
		t.Errorf("\ngot----------\n%swant----------\n%s-----------\n%s", src, out, diff.CharacterDiff(out, src))
	}
}
