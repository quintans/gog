package main

import (
	"bufio"
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"go/format"
	"go/parser"
	"go/token"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
)

const gofilesExt = ".go"

const (
	gogPrefix = "//gog:"
)

var (
	fileName = flag.String("f", "", "file name to be parsed, overriding the environment variable GOFILE value")
	recur    = flag.Bool("r", false, "scan current dir and sub directories")
)

type Generator interface {
	Generate(Struct) []byte
	Name() string
}

func main() {
	flag.Parse()

	fileToParse := getFileToParse()
	if fileToParse != "" {
		parseGoFileAndGenerateFile(fileToParse)
		return
	}

	if *recur {
		scanCurrentDirAndSubDirs()
		return
	}

	scanCurrentDir()
}

func scanCurrentDir() {
	files, err := ioutil.ReadDir(".")
	if err != nil {
		log.Fatal(err)
	}

	for _, file := range files {
		parseGoFileIfTagged(file.Name())
	}
}

func scanCurrentDirAndSubDirs() {
	currentDir := "."
	err := filepath.Walk(currentDir, func(path string, file os.FileInfo, err error) error {
		parseGoFileIfTagged(path)
		return nil
	})
	if err != nil {
		panic(err)
	}
}

func parseGoFileIfTagged(name string) {
	if filepath.Ext(name) == gofilesExt && isTagged(name) {
		parseGoFileAndGenerateFile(name)
	}
}

func isTagged(gofile string) bool {
	file, err := os.Open(gofile)
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := scanner.Text()
		// for now we are just handling tagged structs
		if strings.HasPrefix(line, gogPrefix) {
			return true
		}
	}

	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}

	return false
}

func getFileToParse() string {
	if *fileName != "" {
		return *fileName
	}

	return os.Getenv("GOFILE")
}

func parseGoFileAndGenerateFile(gofile string) {
	p := parseGoFile(gofile)

	var name = strings.Split(gofile, ".")[0]
	fileName := fmt.Sprintf("%s_gog.go", name)
	p.generateGoFile(fileName)
}

func parseGoFile(gofile string) *Parser {
	log.Println("Parsing", gofile)

	fs := token.NewFileSet()
	parsedFile, err := parser.ParseFile(fs, gofile, nil, parser.ParseComments)
	die(err, "parsing package: %s", gofile)

	g := NewParser(parsedFile)

	ast.Inspect(parsedFile, g.genImp)
	ast.Inspect(parsedFile, g.genDecl)

	return g
}

func (p *Parser) generateGoFile(filename string) {
	code := p.generateCode()
	err := ioutil.WriteFile(filename, code, 0644)
	die(err, "Writing output")
}

func (p *Parser) generateCode() []byte {
	p.Printf("// Code generated by gog; DO NOT EDIT.\n")
	//g.Printf("// Generate at %s\n", time.Now().Format("2006-01-02 15:04:05 -0700"))
	p.Printf("package %s\n\n", p.parsedFile.Name.Name)

	for path, name := range p.Imports {
		p.Printf("import %s%s\n", name+" ", path)
	}

	for _, mapper := range p.Structs {
		for tag := range mapper.Tags {
			gen, ok := p.generators[tag]
			if !ok {
				log.Printf("Could not find generator for %s", tag)
				continue
			}

			src := gen.Generate(*mapper)
			p.Printf("\n")
			p.final.Write(src)
		}
	}

	return formatCode(p.final.Bytes())
}

func formatCode(source []byte) []byte {
	src, err := format.Source(source)
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return source
	}
	return src
}

func die(err error, msg string, args ...interface{}) {
	if err != nil {
		s := fmt.Sprintf(msg, args...)
		log.Fatal(s+":", err)
	}
}

type Struct struct {
	Name   string
	Fields []Field
	Tags   map[string]string
}

type Field struct {
	Name     string
	Kind     Kind
	Required bool
}

func (f Field) String() string {
	return f.Name + " " + f.Kind.String()
}

type Kind struct {
	Name    string
	Pointer bool
	Array   bool
	Args    []Field
	Results []Field
}

func (k Kind) IsFunc() bool {
	return k.Args != nil
}

func (p Kind) String() string {
	var s string
	if p.Array {
		s += "[]"
	}
	if p.Pointer {
		s += "*"
	}
	if p.IsFunc() {
		s += "func("
		for _, v := range p.Args {
			s += v.String() + ","
		}
		s += ") ("
		for _, v := range p.Results {
			s += v.String() + ","
		}
		s += ")"
	}
	s += p.Name
	return s
}

type Parser struct {
	Imports    map[string]string
	Structs    []*Struct
	generators map[string]Generator
	final      bytes.Buffer
	parsedFile *ast.File
}

func NewParser(parsedFile *ast.File) *Parser {
	p := &Parser{
		Imports:    make(map[string]string),
		Structs:    make([]*Struct, 0),
		generators: make(map[string]Generator),
		parsedFile: parsedFile,
	}
	p.Register(&Builder{})
	p.Register(&Getters{})

	return p
}

func (p *Parser) Register(gen Generator) {
	name := gen.Name()
	// TODO: don't allow if 'name' already exists
	p.generators[name] = gen
	log.Printf("Registering generator: %s\n", name)
}

func (p *Parser) Printf(format string, args ...interface{}) {
	fmt.Fprintf(&p.final, format, args...)
}

func (p *Parser) genImp(node ast.Node) bool {
	decl, ok := node.(*ast.GenDecl)
	if !ok || decl.Tok != token.IMPORT {
		// We only care about type declarations.
		return true
	}
	for _, spec := range decl.Specs {
		timport := spec.(*ast.ImportSpec)
		var name string
		if timport.Name != nil {
			name = timport.Name.Name
		}
		p.Imports[timport.Path.Value] = name
	}
	return false
}

func (p *Parser) genDecl(node ast.Node) bool {
	decl, ok := node.(*ast.GenDecl)
	if !ok || decl.Tok != token.TYPE {
		// We only care about type declarations.
		return true
	}
	for _, spec := range decl.Specs {
		tspec := spec.(*ast.TypeSpec)
		iType, ok := tspec.Type.(*ast.StructType)
		if ok && p.isMarkedForGeneration(decl) {
			aStruct := &Struct{
				Name:   tspec.Name.Name,
				Fields: make([]Field, 0),
			}
			p.Structs = append(p.Structs, aStruct)
			for _, astField := range iType.Fields.List {
				field := parseField(astField)
				aStruct.Fields = append(aStruct.Fields, field)
			}
			docs := make([]string, 0)
			for _, com := range decl.Doc.List {
				docs = append(docs, com.Text)
			}
			aStruct.Tags = extractStructTags(docs)
		}
	}

	return false
}

func (p *Parser) isMarkedForGeneration(decl *ast.GenDecl) bool {
	for _, com := range decl.Doc.List {
		if p.hasValidGenerationPrefix(com.Text) {
			return true
		}
	}
	return false
}

func (p *Parser) hasValidGenerationPrefix(text string) bool {
	for tag := range p.generators {
		if strings.HasPrefix(text, gogPrefix+tag) {
			return true
		}
	}
	return false
}

func extractStructTags(docs []string) map[string]string {
	tags := make(map[string]string)
	for _, line := range docs {
		if strings.HasPrefix(line, gogPrefix) {
			tag, arg := splitIntoTagAndArgs(line)
			tags[tag] = arg
		}
	}
	return tags
}

func splitIntoTagAndArgs(line string) (string, string) {
	str := strings.TrimSpace(line)
	offset := len(gogPrefix)
	firstSpace := strings.Index(str, " ")
	if firstSpace == -1 {
		return str[offset:], ""
	}
	return str[offset:firstSpace], str[offset+firstSpace:]
}

func parseField(astField *ast.Field) Field {
	//fmt.Println("====> Comment:", astField.Doc.Text())
	var field Field
	field.Kind = parseType(astField.Type)
	if len(astField.Names) > 0 {
		field.Name = astField.Names[0].Name
	}
	return field
}

func parseType(expr ast.Expr) Kind {
	var kind Kind
	switch n := expr.(type) {
	// if the type is imported
	case *ast.ArrayType:
		kind = parseType(n.Elt)
		kind.Array = true
	case *ast.SelectorExpr:
		pck := n.X.(*ast.Ident)
		kind.Name = pck.Name + "." + n.Sel.Name
	case *ast.StarExpr:
		kind = parseType(n.X)
		kind.Pointer = true
	case *ast.Ident:
		kind.Name = n.Name
	case *ast.FuncType:
		kind.Args = make([]Field, 0)
		kind.Results = make([]Field, 0)
		for _, p := range n.Params.List {
			//fmt.Printf("====> Param: %s, %#v\n", p.Type, p.Type)
			arg := parseField(p)
			kind.Args = append(kind.Args, arg)
		}
		for _, res := range n.Results.List {
			result := parseField(res)
			kind.Results = append(kind.Results, result)
		}
	}
	return kind
}

func UncapFirst(s string) string {
	return strings.ToLower(s[:1]) + s[1:]
}
