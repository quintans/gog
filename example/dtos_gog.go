// Code generated by gog; DO NOT EDIT.
// Version: 0.2.2
package example

import (
	"errors"
	"fmt"

	"github.com/quintans/gog/example/vo"
)

// Generated by gog:allArgsConstructor

func NewDto1(
	age func(string) int,
	name string,
	value int64,
	sex bool,
	other *Dto2,
) (Dto1, error) {
	if name == "" {
		return Dto1{}, errors.New("Dto1.name cannot be empty")
	}
	d := Dto1{
		age:   age,
		name:  name,
		value: value,
		sex:   sex,
		other: other,
	}

	return d, nil
}

func MustNewDto1(
	age func(string) int,
	name string,
	value int64,
	sex bool,
	other *Dto2,
) Dto1 {
	d, err := NewDto1(
		age,
		name,
		value,
		sex,
		other,
	)
	if err != nil {
		panic(err)
	}
	return d
}

// Generated by gog:builder

type Dto1Builder struct {
	age   func(string) int
	name  string
	value int64
	sex   bool
	other *Dto2
}

func NewDto1Builder(name string) *Dto1Builder {
	return &Dto1Builder{
		name: name,
	}
}

func (b *Dto1Builder) Age(age func(string) int) *Dto1Builder {
	b.age = age
	return b
}

func (b *Dto1Builder) Name(name string) *Dto1Builder {
	b.name = name
	return b
}

func (b *Dto1Builder) Value(value int64) *Dto1Builder {
	b.value = value
	return b
}

func (b *Dto1Builder) Sex(sex bool) *Dto1Builder {
	b.sex = sex
	return b
}

func (b *Dto1Builder) Other(other *Dto2) *Dto1Builder {
	b.other = other
	return b
}

func (b *Dto1Builder) Build() (Dto1, error) {
	if b.name == "" {
		return Dto1{}, errors.New("Dto1.name cannot be empty")
	}
	s := Dto1{
		age:   b.age,
		name:  b.name,
		value: b.value,
		sex:   b.sex,
		other: b.other,
	}

	return s, nil
}

func (b *Dto1) ToBuild() *Dto1Builder {
	return &Dto1Builder{
		age:   b.age,
		name:  b.name,
		value: b.value,
		sex:   b.sex,
		other: b.other,
	}
}

func (d Dto1) Age() func(string) int {
	return d.age
}

func (d Dto1) Name() string {
	return d.name
}

func (d Dto1) Value() int64 {
	return d.value
}

func (d Dto1) Sex() bool {
	return d.sex
}

func (d Dto1) Other() *Dto2 {
	return d.other
}

func (d Dto1) IsZero() bool {
	return d.age == nil ||
		d.name == "" ||
		d.value == 0 ||
		d.sex == false ||
		d.other == nil
}

func (d Dto1) String() string {
	return fmt.Sprintf("Dto1{age: %+v, name: %+v, value: %+v, sex: %+v, other: %+v}", d.age, d.name, d.value, d.sex, d.other)
}

// Generated by gog:builder

type Dto2Builder struct {
	things []int
}

func NewDto2Builder() *Dto2Builder {
	return &Dto2Builder{}
}

func (b *Dto2Builder) Things(things []int) *Dto2Builder {
	b.things = things
	return b
}

func (b *Dto2Builder) Build() Dto2 {
	s := Dto2{
		things: b.things,
	}

	return s
}

func (b *Dto2) ToBuild() *Dto2Builder {
	return &Dto2Builder{
		things: b.things,
	}
}

func (d Dto2) Things() []int {
	return d.things
}

func (d Dto2) IsZero() bool {
	return len(d.things) == 0
}

func (d Dto2) String() string {
	return fmt.Sprintf("Dto2{things: %+v}", d.things)
}

// Generated by gog:record

func NewCommand(
	id vo.FooID,
) (Command, error) {
	if (id == vo.FooID{}) {
		return Command{}, errors.New("Command.id cannot be empty")
	}
	c := Command{
		id: id,
	}

	return c, nil
}

func MustNewCommand(
	id vo.FooID,
) Command {
	c, err := NewCommand(
		id,
	)
	if err != nil {
		panic(err)
	}
	return c
}

func (c Command) Id() vo.FooID {
	return c.id
}

func (c Command) IsZero() bool {
	return c == Command{}
}

func (c Command) String() string {
	return fmt.Sprintf("Command{id: %+v}", c.id)
}
