package plugins

import (
	"fmt"
	"testing"

	"github.com/quintans/gog/config"
)

func TestValue(t *testing.T) {
	tests := []struct {
		name string
		in   string
		out  string
	}{
		{
			"Value",
			`
package p

// gog:value
type Foo struct {
	name  string
	value []Bar
	pairs map[Bar]Thing
	// gog:@wither
	age   int
}
`,
			fmt.Sprintf(`// Code generated by gog; DO NOT EDIT.
// Version: %s
package p

import "fmt"

// Generated by gog:value

func NewFoo(
	name string,
	value []Bar,
	pairs map[Bar]Thing,
	age int,
) Foo {
	f := Foo{
		name:  name,
		value: value,
		pairs: pairs,
		age:   age,
	}

	return f
}

func (f Foo) Name() string {
	return f.name
}

func (f Foo) Value() []Bar {
	return f.value
}

func (f Foo) Pairs() map[Bar]Thing {
	return f.pairs
}

func (f Foo) Age() int {
	return f.age
}

func (f Foo) WithAge(age int) Foo {
	return Foo{
		name:  f.name,
		value: f.value,
		pairs: f.pairs,
		age:   age,
	}
}

func (f Foo) IsZero() bool {
	return f == Foo{}
}

func (f Foo) String() string {
	return fmt.Sprintf("Foo{name: %%+v, value: %%+v, pairs: %%+v, age: %%+v}", f.name, f.value, f.pairs, f.age)
}
`, config.Version),
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			run(t, tt.in, tt.out)
		})
	}
}
