package plugins

import (
	"fmt"
	"testing"

	"github.com/quintans/gog/config"
)

func TestOption(t *testing.T) {
	tests := []struct {
		name string
		in   string
		out  string
	}{
		{
			"Option_Simple",
			`
package p

// gog:options
type Foo struct {
	name  string
	timeout int64
}
`,
			fmt.Sprintf(`// Code generated by gog; DO NOT EDIT.
// Version: %s
package p

// Generated by gog:options

func FooName(name string) func(*Foo) {
	return func(t *Foo) {
		t.name = name
	}
}

func FooTimeout(timeout int64) func(*Foo) {
	return func(t *Foo) {
		t.timeout = timeout
	}
}

func NewFooOptions(options ...func(*Foo)) *Foo {
	t := &Foo{}
	for _, option := range options {
		option(t)
	}
	return t
}
`, config.Version),
		},
		{
			"Option required and ignore",
			`
package p

// gog:options
type Foo struct {
	// gog:@required
	name  string
	// gog:@ignore
	value []Bar
	timeout int64
}
`,
			fmt.Sprintf(`// Code generated by gog; DO NOT EDIT.
// Version: %s
package p

// Generated by gog:options

func FooTimeout(timeout int64) func(*Foo) {
	return func(t *Foo) {
		t.timeout = timeout
	}
}

func NewFooOptions(name string, options ...func(*Foo)) *Foo {
	t := &Foo{
		name: name,
	}
	for _, option := range options {
		option(t)
	}
	return t
}
`, config.Version),
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			run(t, tt.in, tt.out)
		})
	}
}
